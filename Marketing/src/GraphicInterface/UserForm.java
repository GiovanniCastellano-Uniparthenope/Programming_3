package GraphicInterface;

import Code.KMeans.*;
import Code.*;
import Code.TFIDF.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 * @author Giovanni Castellano
 */
public class UserForm extends javax.swing.JFrame {

    private Guest user;
    ArrayList<Product> products;
    ArrayList<Product> offers;
    ArrayList<Product> cart;
    ArrayList<User> users;
    public UserForm(User user) {
        this.user=(Guest)user;
        initComponents();
        products = FileManager.readProductFile();
        offers = FileManager.readOffersFile(this.user);
        users = FileManager.readUserFile();
        this.updateUserListProducts();
        this.updateUserListOffers();
        this.setCardFielsVisible(false);
        ENPanel.setVisible(false);
    }
    
    {
        products = new ArrayList<>();
        cart = new ArrayList<>();
        users = new ArrayList<>();
        offers = new ArrayList<>();
    }
    
    private void setCardFielsVisible(boolean b)
    {
        
        CardData1.setText("");
        CardData2.setText("");
        CardData3.setText("");
        CardData4.setText("");
        CardData5.setText("");
        CardData6.setText("");
        CardData7.setText("");

        CardData1.setEnabled(b);
        CardData2.setEnabled(b);
        CardData3.setEnabled(b);
        CardData4.setEnabled(b);
        CardData5.setEnabled(b);
        CardData6.setEnabled(b);
        CardData7.setEnabled(b);
    }
    
    private void updateUserListProducts()
    {
        int index = UserListProducts.getSelectedIndex();
        DefaultListModel<String> list = new DefaultListModel<>();
        String stringa;
        for(Product product:this.products)
        {
            stringa = "";
            stringa = stringa.concat(product.getName() + " - " + product.getStock() + " pieces - " + String.format("%.02f", product.getCost()) + "€/piece");
            list.addElement(stringa);
        }
        UserListProducts.setModel(list);
        if(index<0)
        {
            index=0;
            UserListProducts.setSelectedIndex(index);
        }
        else
            UserListProducts.setSelectedIndex(index);
        if(this.products.isEmpty())
            UserProductDescription.setText("");
        else
            UserProductDescription.setText(this.products.get(index).getDescription());
    }
    
    private void updateUserListOffers()
    {
        int index = OfferList.getSelectedIndex();
        DefaultListModel<String> list = new DefaultListModel<>();
        String stringa;
        for(Product product:this.offers)
        {
            stringa = "";
            stringa = stringa.concat(product.getName() + " - " + product.getStock() + " pieces - " + String.format("%.02f", product.getCost()) + "€/piece");
            list.addElement(stringa);
        }
        OfferList.setModel(list);
        if(index<0)
            OfferList.setSelectedIndex(0);
        else
            OfferList.setSelectedIndex(index);
    }
    
    
    private void updateUserPurchasedProducts()
    {
        int index = UserListPurchased.getSelectedIndex();
        DefaultListModel<String> list = new DefaultListModel<>();
        String stringa;
        for(Product product:this.cart)
        {
            stringa = "";
            stringa = stringa.concat(product.getStock() + " X " + product.getName() + " - " + String.format("%.02f", product.getCost()) + "€");
            list.addElement(stringa);
        }
        UserListPurchased.setModel(list);
        if(index<0||index>=this.cart.size())
            UserListPurchased.setSelectedIndex(0);
        else if(index<this.cart.size())
            UserListPurchased.setSelectedIndex(index);
    }
    
    private void updateCartValue()
    {
        double val=0;
        for(Product product:this.cart)
            val+=product.getCost()*product.getStock();
        CartAmountLabel.setText(String.format("%.02f", val) + "€");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BuyRadioGroup = new javax.swing.ButtonGroup();
        UserPanel = new javax.swing.JTabbedPane();
        MarketPanel = new javax.swing.JPanel();
        ListProductsPanel = new javax.swing.JScrollPane();
        UserListProducts = new javax.swing.JList<>();
        DescriptionPanel = new javax.swing.JScrollPane();
        UserProductDescription = new javax.swing.JTextArea();
        ListProductsPanel1 = new javax.swing.JScrollPane();
        UserListPurchased = new javax.swing.JList<>();
        InProductsButton = new javax.swing.JButton();
        InOffersButton = new javax.swing.JButton();
        ListOffersPanel = new javax.swing.JScrollPane();
        OfferList = new javax.swing.JList<>();
        RemoveButton = new javax.swing.JButton();
        BuyLabel = new javax.swing.JLabel();
        CardLabel5 = new javax.swing.JLabel();
        RadioPanel = new javax.swing.JPanel();
        CashRadio = new javax.swing.JRadioButton();
        CreditCardRadio = new javax.swing.JRadioButton();
        BancomatRadio = new javax.swing.JRadioButton();
        ConfirmPaymentButton = new javax.swing.JButton();
        YourCartLabel = new javax.swing.JLabel();
        CartAmountLabel = new javax.swing.JLabel();
        CardData1 = new javax.swing.JTextField();
        CardData2 = new javax.swing.JTextField();
        CardData3 = new javax.swing.JTextField();
        CardData4 = new javax.swing.JTextField();
        CartPreviewAmountLabel1 = new javax.swing.JLabel();
        CardData5 = new javax.swing.JTextField();
        CardData6 = new javax.swing.JTextField();
        CardLabel2 = new javax.swing.JLabel();
        CardLabel3 = new javax.swing.JLabel();
        CardLabel4 = new javax.swing.JLabel();
        CardLabel6 = new javax.swing.JLabel();
        CardLabel1 = new javax.swing.JLabel();
        CardLabel7 = new javax.swing.JLabel();
        CardData7 = new javax.swing.JTextField();
        YourCartLabel1 = new javax.swing.JLabel();
        YourCartLabel2 = new javax.swing.JLabel();
        HelpPanel = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        ITPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        ENPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        LanguageComboBox = new javax.swing.JComboBox<>();
        DeleteUserAccountButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(820, 570));
        setResizable(false);

        MarketPanel.setBackground(new java.awt.Color(255, 255, 153));

        UserListProducts.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        UserListProducts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        UserListProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserListProductsMouseClicked(evt);
            }
        });
        ListProductsPanel.setViewportView(UserListProducts);

        DescriptionPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        UserProductDescription.setColumns(20);
        UserProductDescription.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        UserProductDescription.setRows(5);
        DescriptionPanel.setViewportView(UserProductDescription);

        UserListPurchased.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        UserListPurchased.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListProductsPanel1.setViewportView(UserListPurchased);

        InProductsButton.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        InProductsButton.setText("↓");
        InProductsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InProductsButtonActionPerformed(evt);
            }
        });

        InOffersButton.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        InOffersButton.setText("←");
        InOffersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InOffersButtonActionPerformed(evt);
            }
        });

        OfferList.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        OfferList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        OfferList.setToolTipText("");
        ListOffersPanel.setViewportView(OfferList);

        RemoveButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        RemoveButton.setText("Remove selected");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        BuyLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BuyLabel.setText("Buy cart items:");

        CardLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CardLabel5.setText("Expires:");

        RadioPanel.setBackground(new java.awt.Color(255, 255, 153));

        CashRadio.setBackground(new java.awt.Color(255, 255, 153));
        BuyRadioGroup.add(CashRadio);
        CashRadio.setSelected(true);
        CashRadio.setText("Cash");
        CashRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CashRadioMouseClicked(evt);
            }
        });

        CreditCardRadio.setBackground(new java.awt.Color(255, 255, 153));
        BuyRadioGroup.add(CreditCardRadio);
        CreditCardRadio.setText("Credit card");
        CreditCardRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CreditCardRadioMouseClicked(evt);
            }
        });

        BancomatRadio.setBackground(new java.awt.Color(255, 255, 153));
        BuyRadioGroup.add(BancomatRadio);
        BancomatRadio.setText("Bancomat");
        BancomatRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BancomatRadioMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout RadioPanelLayout = new javax.swing.GroupLayout(RadioPanel);
        RadioPanel.setLayout(RadioPanelLayout);
        RadioPanelLayout.setHorizontalGroup(
            RadioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RadioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RadioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CashRadio)
                    .addComponent(CreditCardRadio)
                    .addComponent(BancomatRadio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RadioPanelLayout.setVerticalGroup(
            RadioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RadioPanelLayout.createSequentialGroup()
                .addComponent(CashRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CreditCardRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BancomatRadio))
        );

        ConfirmPaymentButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ConfirmPaymentButton.setForeground(new java.awt.Color(255, 0, 0));
        ConfirmPaymentButton.setText("Confirm");
        ConfirmPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmPaymentButtonActionPerformed(evt);
            }
        });

        YourCartLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        YourCartLabel.setText("Your cart: ");

        CartAmountLabel.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        CartAmountLabel.setForeground(new java.awt.Color(255, 0, 0));
        CartAmountLabel.setText("0.00€");

        CardData1.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData1KeyTyped(evt);
            }
        });

        CardData2.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData2KeyTyped(evt);
            }
        });

        CardData3.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData3KeyTyped(evt);
            }
        });

        CardData4.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData4KeyTyped(evt);
            }
        });

        CartPreviewAmountLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CartPreviewAmountLabel1.setText("Cart total value: ");

        CardData5.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData5KeyTyped(evt);
            }
        });

        CardData6.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData6KeyTyped(evt);
            }
        });

        CardLabel2.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        CardLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CardLabel2.setText("-");

        CardLabel3.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        CardLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CardLabel3.setText("-");

        CardLabel4.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        CardLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CardLabel4.setText("-");

        CardLabel6.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        CardLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CardLabel6.setText("/");

        CardLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CardLabel1.setText("Card code:");

        CardLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        CardLabel7.setText("Secret code:");

        CardData7.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CardData7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CardData7KeyTyped(evt);
            }
        });

        YourCartLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        YourCartLabel1.setText("Your personal offers: ");

        YourCartLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        YourCartLabel2.setText("(MM/YY)");

        javax.swing.GroupLayout MarketPanelLayout = new javax.swing.GroupLayout(MarketPanel);
        MarketPanel.setLayout(MarketPanelLayout);
        MarketPanelLayout.setHorizontalGroup(
            MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MarketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(MarketPanelLayout.createSequentialGroup()
                        .addComponent(YourCartLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(InProductsButton)
                        .addGap(41, 41, 41)
                        .addComponent(RemoveButton))
                    .addComponent(ListProductsPanel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ListProductsPanel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DescriptionPanel, javax.swing.GroupLayout.Alignment.LEADING))
                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MarketPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(InOffersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CardLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CardLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                                .addGap(254, 254, 254))
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(YourCartLabel1)
                                    .addComponent(ListOffersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(MarketPanelLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(MarketPanelLayout.createSequentialGroup()
                                        .addComponent(CartPreviewAmountLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(CartAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(BuyLabel)
                                    .addGroup(MarketPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(CardLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                                .addComponent(CardData5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CardLabel6)
                                                .addGap(2, 2, 2)
                                                .addComponent(CardData6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(YourCartLabel2))
                                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                                .addComponent(CardData1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(CardLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CardData2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6)
                                                .addComponent(CardLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CardData3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CardLabel4)
                                                .addGap(2, 2, 2)
                                                .addComponent(CardData4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(CardData7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addComponent(RadioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ConfirmPaymentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66))))))
        );
        MarketPanelLayout.setVerticalGroup(
            MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MarketPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MarketPanelLayout.createSequentialGroup()
                        .addComponent(BuyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addComponent(ConfirmPaymentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CartAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CartPreviewAmountLabel1)))
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addComponent(RadioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)))
                        .addGap(24, 24, 24)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CardData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CardData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CardData3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CardData4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CardLabel1))
                            .addComponent(CardLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(MarketPanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(CardLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(CardLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CardLabel5)
                            .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(CardLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CardData5)
                                    .addComponent(CardData6)
                                    .addComponent(YourCartLabel2))))
                        .addGap(3, 3, 3)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CardLabel7)
                            .addComponent(CardData7))
                        .addGap(22, 22, 22)
                        .addComponent(YourCartLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(ListOffersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MarketPanelLayout.createSequentialGroup()
                        .addComponent(ListProductsPanel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DescriptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(YourCartLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InProductsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MarketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ListProductsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MarketPanelLayout.createSequentialGroup()
                                .addComponent(InOffersButton)
                                .addGap(42, 42, 42)))))
                .addContainerGap())
        );

        UserPanel.addTab("Market", MarketPanel);

        HelpPanel.setBackground(new java.awt.Color(153, 255, 153));

        ITPanel.setBackground(new java.awt.Color(153, 255, 153));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(153, 255, 153));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("L’interfaccia si presenta con tre liste rappresentanti rispettivamente la lista del mercato  (in alto a sinistra), il carrello (in basso a sinistra) e la lista delle offerte (in basso a destra). È possibile inserire degli oggetti nel carrello semplicemente cliccando i tasti freccia: ve ne sono due, uno per inserire un oggetto dalla lista del mercato, l’altro per inserire un oggetto dalla lista delle offerte. Per inserire un oggetto, basta selezionarlo nella lista di provenienza e cliccare il tasto freccia relativo alla lista, invece, per rimuovere un oggetto dal carrello, basta selezionare e cliccare il tasto “Remove selected”. Le  operazioni di inserimento e rimozione aggiungeranno/rimuoveranno sempre un’unità per volta, per cui, se si vogliono effettuare spostamenti multipli dello stesso oggetto, basta cliccare più volte sul tasto   che svolge l’operazione. Le offerte non sono sempre disponibili, se  la lista è vuota, le cause possono essere che l’utente è stato creato di recente, oppure che nessun gestore ha ancora preso in considerazione l’eventualità di proporre un’offerta. \n\nDopo aver selezionato abbastanza oggetti nel carrello, è possibile  effettuare il pagamento, in contanti o tramite carta di credito/bancomat, dopo il pagamento verranno rimossi gli oggetti dal carrello e l’acquisto verrà registrato.\n\nIl pulsante a destra invece elimina l'attuale account, ciò significa non solo che non sarà più possibile eseguire il login con esso, ma anche che verranno cancellati tutti i dati a esso correlati (acquisti effettuati ed offerte)");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout ITPanelLayout = new javax.swing.GroupLayout(ITPanel);
        ITPanel.setLayout(ITPanelLayout);
        ITPanelLayout.setHorizontalGroup(
            ITPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ITPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );
        ITPanelLayout.setVerticalGroup(
            ITPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ITPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ENPanel.setBackground(new java.awt.Color(153, 255, 153));

        jTextArea2.setBackground(new java.awt.Color(153, 255, 153));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("The interface shows three lists representing the market list (top-left), the cart (bottom-left) and the offers list (bottom-right). You may add items into your cart by selecting them from the market list or from the offers list, and by clicking the corresponding arrow button. If you wish to remove an item from your cart, the “Remove selected” button does exactly this operation: both insert and remove operations are made on single units, so that if you want to add/remove more than one item, you just need to click the corresponding button again. The offer list may be empty, and this might be caused by the user account being newly created or because no one of the admins  thought a good offer for you yet.\n\nAfter adding enough items into your cart, you can proceed with the payment, and you could do it by using cash or by using a credit card/bancomat, and after the payment has succeded, the cart will be  emptied and the purchase will be recorded.\n\nThe button on the right deletes this account, this means that you wont be able to login with this account ever again, and also, that all the related data will be deleted too (purchase history and offers)\n");
        jTextArea2.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout ENPanelLayout = new javax.swing.GroupLayout(ENPanel);
        ENPanel.setLayout(ENPanelLayout);
        ENPanelLayout.setHorizontalGroup(
            ENPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ENPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addContainerGap())
        );
        ENPanelLayout.setVerticalGroup(
            ENPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ENPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(ITPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(ENPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ITPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(ENPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ITPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(ENPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        LanguageComboBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        LanguageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IT", "EN" }));
        LanguageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LanguageComboBoxItemStateChanged(evt);
            }
        });

        DeleteUserAccountButton.setFont(new java.awt.Font("Arial Black", 0, 11)); // NOI18N
        DeleteUserAccountButton.setForeground(new java.awt.Color(255, 0, 0));
        DeleteUserAccountButton.setText("DELETE THIS ACCOUNT");
        DeleteUserAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteUserAccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HelpPanelLayout = new javax.swing.GroupLayout(HelpPanel);
        HelpPanel.setLayout(HelpPanelLayout);
        HelpPanelLayout.setHorizontalGroup(
            HelpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HelpPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(HelpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeleteUserAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        HelpPanelLayout.setVerticalGroup(
            HelpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HelpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1)
                .addContainerGap())
            .addGroup(HelpPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(LanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104)
                .addComponent(DeleteUserAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        UserPanel.addTab("Help", HelpPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UserPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UserPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InProductsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InProductsButtonActionPerformed
        int index = UserListProducts.getSelectedIndex();
        if(index>=0)
        {
            int stock = this.products.get(index).getStock();
            if(stock>0)
            {
                this.products.get(index).setStock(stock-1);
                boolean found=false;
                for(Product product:this.cart)
                {
                    if(product.getID().equals(this.products.get(index).getID())&&product.getCost()==this.products.get(index).getCost())
                    {
                        int cartstock=product.getStock();
                        product.setStock(cartstock+1);
                        found=true;
                        break;
                    }
                }
                if(found==false)
                {
                    String ID = this.products.get(index).getID();
                    String name = this.products.get(index).getName();
                    String description = this.products.get(index).getDescription();
                    String category = this.products.get(index).getCategory();
                    int count = 1;
                    double cost = this.products.get(index).getCost();
                    this.cart.add(new Product(ID, name, description, count, cost, category));
                }
            }
            else
            {
                JOptionPane.showConfirmDialog(null, "No more items aviable", "Out of stock", JOptionPane.OK_CANCEL_OPTION);
            }
            this.updateUserListProducts();
            this.updateUserListOffers();
            this.updateUserPurchasedProducts();
            this.updateCartValue();
        }
    }//GEN-LAST:event_InProductsButtonActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        int index = UserListPurchased.getSelectedIndex();
        if(index>=0)
        {
            int stock = this.cart.get(index).getStock();
            boolean found=false;
            int prodstock=0;
            for(Product product:this.products)
            {
                if(product.getID().equals(this.cart.get(index).getID())&&product.getCost()==this.cart.get(index).getCost())
                {
                    prodstock=product.getStock();
                    product.setStock(prodstock+1);
                    found=true;
                    break;
                }
            }
            if(found==false)
            {
                for(Product product:this.offers)
                {
                    if(product.getID().equals(this.cart.get(index).getID())&&product.getCost()==this.cart.get(index).getCost())
                    {
                        prodstock=product.getStock();
                        product.setStock(prodstock+1);
                        break;
                    }
                }
            }
            if(stock>1)
            {
                this.cart.get(index).setStock(stock-1);
            }
            else
            {
                this.cart.remove(index);
            }
            this.updateUserListProducts();
            this.updateUserListOffers();
            this.updateUserPurchasedProducts();
            this.updateCartValue();
        }
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void InOffersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InOffersButtonActionPerformed
        int index = OfferList.getSelectedIndex();
        if(index>=0)
        {
            int stock = this.offers.get(index).getStock();
            if(stock>0)
            {
                this.offers.get(index).setStock(stock-1);
                boolean found=false;
                for(Product product:this.cart)
                {
                    if(product.getID().equals(this.offers.get(index).getID())&&product.getCost()==this.offers.get(index).getCost())
                    {
                        int cartstock=product.getStock();
                        product.setStock(cartstock+1);
                        found=true;
                        break;
                    }
                }
                if(found==false)
                {
                    String ID = this.offers.get(index).getID();
                    String name = this.offers.get(index).getName();
                    String description = this.offers.get(index).getDescription();
                    String category = this.offers.get(index).getCategory();
                    int count = 1;
                    double cost = this.offers.get(index).getCost();
                    this.cart.add(new Product(ID, name, description, count, cost, category));
                }
            }
            else
            {
                JOptionPane.showConfirmDialog(null, "No more items aviable", "Out of stock", JOptionPane.OK_OPTION);
            }
            this.updateUserListProducts();
            this.updateUserListOffers();
            this.updateUserPurchasedProducts();
            this.updateCartValue();
        }
    }//GEN-LAST:event_InOffersButtonActionPerformed

    private void ConfirmPaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmPaymentButtonActionPerformed
        char[] numbers = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        boolean ok=true;
        if(CreditCardRadio.isSelected()||BancomatRadio.isSelected())
        {
            String string;
            boolean found;
            string=CardData1.getText();
            for(int i=0; i<string.length(); i++)
            {
                found=false;
                for(char c:numbers)
                {
                    if(string.charAt(i)==c)
                    {
                        found=true;
                    }
                }
                if(found==false)
                {
                    ok=false;
                    break;
                }
            }
            if(ok==true)
            {
                string=CardData2.getText();
                for(int i=0; i<string.length(); i++)
                {
                    found=false;
                    for(char c:numbers)
                    {
                        if(string.charAt(i)==c)
                        {
                            found=true;
                        }
                    }
                    if(found==false)
                    {
                        ok=false;
                        break;
                    }
                }
                if(ok==true)
                {
                    string=CardData3.getText();
                    for(int i=0; i<string.length(); i++)
                    {
                        found=false;
                        for(char c:numbers)
                        {
                            if(string.charAt(i)==c)
                            {
                                found=true;
                            }
                        }
                        if(found==false)
                        {
                            ok=false;
                            break;
                        }
                    }
                    if(ok==true)
                    {
                        string=CardData4.getText();
                        for(int i=0; i<string.length(); i++)
                        {
                            found=false;
                            for(char c:numbers)
                            {
                                if(string.charAt(i)==c)
                                {
                                    found=true;
                                }
                            }
                            if(found==false)
                            {
                                ok=false;
                                break;
                            }
                        }
                        if(ok==true)
                        {
                            string=CardData5.getText();
                            for(int i=0; i<string.length(); i++)
                            {
                                found=false;
                                for(char c:numbers)
                                {
                                    if(string.charAt(i)==c)
                                    {
                                        found=true;
                                    }
                                }
                                if(found==false)
                                {
                                    ok=false;
                                    break;
                                }
                            }
                            if(Integer.parseInt(CardData5.getText())>12)
                                ok=false;
                            if(ok==true)
                            {
                                string=CardData6.getText();
                                for(int i=0; i<string.length(); i++)
                                {
                                    found=false;
                                    for(char c:numbers)
                                    {
                                        if(string.charAt(i)==c)
                                        {
                                            found=true;
                                        }
                                    }
                                    if(found==false)
                                    {
                                        ok=false;
                                        break;
                                    }
                                }
                                if(ok==true)
                                {
                                    string=CardData7.getText();
                                    for(int i=0; i<string.length(); i++)
                                    {
                                        found=false;
                                        for(char c:numbers)
                                        {
                                            if(string.charAt(i)==c)
                                            {
                                                found=true;
                                            }
                                        }
                                        if(found==false)
                                        {
                                            ok=false;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } 
        }
        if(ok==true)
        {
            ArrayList<Product> purchased = FileManager.readPurchasedFile(this.user);
            for(Product product:this.cart)
                purchased.add(product);
            FileManager.writePurchasedFile(purchased, this.user);
            FileManager.writeProductFile(this.products);
            FileManager.writeOffersFile(this.offers, this.user);
            this.cart.clear();
            this.products=FileManager.readProductFile();
            this.offers=FileManager.readOffersFile(user);
            this.updateCartValue();
            this.updateUserListProducts();
            this.updateUserListOffers();
            this.updateUserPurchasedProducts();
            if(CreditCardRadio.isSelected()||BancomatRadio.isSelected())
                this.setCardFielsVisible(true);
            else
                this.setCardFielsVisible(false);
        }
        else
        {
            JOptionPane.showConfirmDialog(null, "Card data error: fields must contain digits only and the expire date must be valid", "Card Data Error", JOptionPane.OK_CANCEL_OPTION);
        }
    }//GEN-LAST:event_ConfirmPaymentButtonActionPerformed

    private void CardData1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData1KeyTyped
        if(CardData1.getText().length()>3)
        {
            String string = CardData1.getText();
            CardData1.setText(string.substring(0, 3));
        }
    }//GEN-LAST:event_CardData1KeyTyped

    private void CashRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CashRadioMouseClicked
        if(CashRadio.isSelected())
            this.setCardFielsVisible(false);
    }//GEN-LAST:event_CashRadioMouseClicked

    private void CreditCardRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreditCardRadioMouseClicked
        if(CreditCardRadio.isSelected())
            this.setCardFielsVisible(true);
    }//GEN-LAST:event_CreditCardRadioMouseClicked

    private void BancomatRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BancomatRadioMouseClicked
        if(BancomatRadio.isSelected())
            this.setCardFielsVisible(true);
    }//GEN-LAST:event_BancomatRadioMouseClicked

    private void CardData2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData2KeyTyped
        if(CardData2.getText().length()>3)
        {
            String string = CardData2.getText();
            CardData2.setText(string.substring(0, 3));
        }
    }//GEN-LAST:event_CardData2KeyTyped

    private void CardData3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData3KeyTyped
        if(CardData3.getText().length()>3)
        {
            String string = CardData3.getText();
            CardData3.setText(string.substring(0, 3));
        }
    }//GEN-LAST:event_CardData3KeyTyped

    private void CardData4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData4KeyTyped
        if(CardData4.getText().length()>3)
        {
            String string = CardData4.getText();
            CardData4.setText(string.substring(0, 3));
        }
    }//GEN-LAST:event_CardData4KeyTyped

    private void CardData5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData5KeyTyped
        if(CardData5.getText().length()>1)
        {
            String string = CardData5.getText();
            CardData5.setText(string.substring(0, 1));
        }
    }//GEN-LAST:event_CardData5KeyTyped

    private void CardData6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData6KeyTyped
        if(CardData6.getText().length()>1)
        {
            String string = CardData6.getText();
            CardData6.setText(string.substring(0, 1));
        }
    }//GEN-LAST:event_CardData6KeyTyped

    private void CardData7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CardData7KeyTyped
        if(CardData7.getText().length()>2)
        {
            String string = CardData7.getText();
            CardData7.setText(string.substring(0, 2));
        }
    }//GEN-LAST:event_CardData7KeyTyped

    private void UserListProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserListProductsMouseClicked
        UserProductDescription.setText(this.products.get(UserListProducts.getSelectedIndex()).getDescription());
    }//GEN-LAST:event_UserListProductsMouseClicked

    private void LanguageComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LanguageComboBoxItemStateChanged
        if("IT".equals(LanguageComboBox.getSelectedItem()))
        {
            ITPanel.setVisible(true);
            ENPanel.setVisible(false);
        }
        if("EN".equals(LanguageComboBox.getSelectedItem()))
        {
            ITPanel.setVisible(false);
            ENPanel.setVisible(true);
        }
    }//GEN-LAST:event_LanguageComboBoxItemStateChanged

    private void DeleteUserAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteUserAccountButtonActionPerformed
        for(User user:this.users)
            if(user.getUserLoginName().equals(this.user.getUserLoginName()))
            {
                this.users.remove(user);
                break;
            }
        
        FileManager.deleteOffersFile(this.user);
        FileManager.deletePurchasedFile(this.user);
        FileManager.writeUserFile(this.users);
        
        try {Thread.sleep(2000);}catch(InterruptedException e){}
        System.exit(0);
    }//GEN-LAST:event_DeleteUserAccountButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BancomatRadio;
    private javax.swing.JLabel BuyLabel;
    private javax.swing.ButtonGroup BuyRadioGroup;
    private javax.swing.JTextField CardData1;
    private javax.swing.JTextField CardData2;
    private javax.swing.JTextField CardData3;
    private javax.swing.JTextField CardData4;
    private javax.swing.JTextField CardData5;
    private javax.swing.JTextField CardData6;
    private javax.swing.JTextField CardData7;
    private javax.swing.JLabel CardLabel1;
    private javax.swing.JLabel CardLabel2;
    private javax.swing.JLabel CardLabel3;
    private javax.swing.JLabel CardLabel4;
    private javax.swing.JLabel CardLabel5;
    private javax.swing.JLabel CardLabel6;
    private javax.swing.JLabel CardLabel7;
    private javax.swing.JLabel CartAmountLabel;
    private javax.swing.JLabel CartPreviewAmountLabel1;
    private javax.swing.JRadioButton CashRadio;
    private javax.swing.JButton ConfirmPaymentButton;
    private javax.swing.JRadioButton CreditCardRadio;
    private javax.swing.JButton DeleteUserAccountButton;
    private javax.swing.JScrollPane DescriptionPanel;
    private javax.swing.JPanel ENPanel;
    private javax.swing.JPanel HelpPanel;
    private javax.swing.JPanel ITPanel;
    private javax.swing.JButton InOffersButton;
    private javax.swing.JButton InProductsButton;
    private javax.swing.JComboBox<String> LanguageComboBox;
    private javax.swing.JScrollPane ListOffersPanel;
    private javax.swing.JScrollPane ListProductsPanel;
    private javax.swing.JScrollPane ListProductsPanel1;
    private javax.swing.JPanel MarketPanel;
    private javax.swing.JList<String> OfferList;
    private javax.swing.JPanel RadioPanel;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JList<String> UserListProducts;
    private javax.swing.JList<String> UserListPurchased;
    private javax.swing.JTabbedPane UserPanel;
    private javax.swing.JTextArea UserProductDescription;
    private javax.swing.JLabel YourCartLabel;
    private javax.swing.JLabel YourCartLabel1;
    private javax.swing.JLabel YourCartLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
